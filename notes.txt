{/* {people.map((person) => (
        <Welcome name={person} />
      ))} */}
      {/* <Welcome name="Raja" age="20" />
      <Welcome name="Dinesh" age="22" />
      <Welcome name="Babu" age="25" /> */}


      
//JSX  => Javascript XML
//class => reserved keyword
//{} => template syntax
//custom component
// 1. First letter should be capital
// 2. It should return JSX



hooks => function 

useState => const [state, setState] = useState(initialValue)

const [like, setLike] = useState(10)

state =>  current
state of the art technology => top technology in current
state of mind- currently in mind


{/* <Counter />
      <Counter />
      <Counter /> */}
      {/* {user.map((usr) => (
        <Welcome nm={usr.name} ag={usr.age} />
      ))} */}


      const people = ["Raja", "Dinesh", "Babu"]; //Array of string
  const user = [
    {
      name: "Raja",
      age: "20",
    },
    {
      name: "Dinesh",
      age: "22",
    },
    {
      name: "Babu",
      age: "25",
    },
  ];
  // console.log(user)

  

  StateFull component = class component
  StateLess Component = function component


 redux => state management tool => complex

 Types
 ----------
 1. redux
 2. redux-toolkit
 3. redux-persist
 4. redux-thunk
 5. redux-saga

Package
----------
redux => enable the redux architecture(core library)
react-redux => connect react component to redux store
redux-toolkit => maintainability, organized


redux terminology
------------------

store => manage all the states => global object 
action  => CRUD operation
reducer => what to add  => function => current state and action Types
dispatch  => get updated states


Redux-toolkit terminology
---------------------------

Reducer + action => createSlice(method)
setup redux store  => configureStore(pass reducer, combine reducer)

steps
------

1. Define the store => configureStore()
2. Define the reducer +  action  => createSlice()
3. select(state) => useSelector && select(action) => useDispatch

Benefits
---------
1. centralized state management => store => complex
2. get updated states
3. debug => redux devTool chrome extension
4. performance